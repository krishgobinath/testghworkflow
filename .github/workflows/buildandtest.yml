name: BuildAndRunAutomatedTest
on: [push, workflow_dispatch]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job1:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=matrix::{\"configs\":[\"miner1.json\",\"miner2.json\"]}"
      - name: Echo json
        run: |
          echo "${{ steps.set-matrix.outputs.matrix }}"

  job2:
    needs: job1
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.job1.outputs.matrix) }}
    steps:
      - run: build
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: read config
        id: package
        uses: juliangruber/read-file-action@v1
        with:
          path: './info.json'
      - name: Process another JSON
        run: |
          formatted_data=$(jq -r '.configs | @json' <<< '{"configs":["miner1.json","miner2.json"]}')
          run: echo Hello, world 2!
          echo "{\"configs\":$formatted_data}"
      - name: Process JSON
        run: |
          formatted_data=$(echo "${{ steps.package.outputs.content }}" | jq '.configs' -c)
          run: echo Hello, world 1!
          echo "{\"configs\":$formatted_data}"
          
      - name: Echo info json
        run: echo "${{ steps.package.outputs.content }}"
      - name: parse the json
        id: parse-json
        run: |
          parse=$(jq -r '.configs' <<< '{"configs":["miner1.json","miner2.json"]}')
          echo "{minerconfigs}={parse}" >> "$GITHUB_OUTPUT"
          echo "$parse"
          echo "$minerconfigs"
          parsed_output=$(echo '{"configs":["miner1.json","miner2.json"]}' | jq -r '.configs')
          echo "::set-output name=minerconfigs::$parsed_output"
          echo "::set-output name=minerone::"one""
          echo "$parsed_output"          
      - name: Echo json
        run: |
          echo "${{ fromJSON(steps.parse-json.outputs.minerconfigs) }}"
          echo "${{ steps.parse-json.outputs.minerone }}"

      
